import styled from "@emotion/styled";
import {
  Tabs,
  Text,
  Grid,
  Rating,
  Badge,
  Note,
  Pagination,
} from "@geist-ui/core";
import { GetServerSideProps } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";
import useSWR, { SWRConfig } from "swr";
import { IMAGE_URL, MOVIES_URL } from "../api";
import {
  Card,
  Container,
  Grid as GridContainer,
  PosterCover,
} from "../components/styled";
import { blurDataUrl } from "../config";
import { MovieListTypes, MovieRecord, PaginationResponse } from "../types";

const CardRelative = styled(Card)`
  position: relative;
`;

const BlurBg = styled.div`
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  top: 0;

  display: none;
  flex-direction: column;
  justify-content: flex-end;
  padding: 1rem;
  pointer-events: none;

  color: white;
  background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);

  &[data-active="true"] {
    display: flex;
  }
`;

const SORT_LIST = [
  // {value: "release_date.asc", text: ''},
  { value: "release_date.desc", text: "Upcoming" },
  // {value: "popularity.asc", text: ''},
  { value: "popularity.desc", text: "Popular" },
  // {value: "revenue.asc", text: ''},
  // {value: "revenue.desc", text: ''},
  // {value: "primary_release_date.asc", text: ''},
  // {value: "primary_release_date.desc", text: ''},
  // {value: "original_title.asc", text: ''},
  // {value: "original_title.desc", text: ''},
  // {value: "vote_average.asc", text: ''},
  // { value: "vote_average.desc", text: "" },
  // {value: "vote_count.asc", text: ''},
  { value: "vote_count.desc", text: "Highest Rating" },
];

const DEFAULT_SORT: typeof MovieListTypes[number] = "upcoming";

const MOVIES_TYPES = MovieListTypes.map((type) => ({
  value: type,
  text: type.replace("_", " "),
}));

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const moviesRes = await fetch(MOVIES_URL());
  const movies: MovieRecord[] = await moviesRes.json();

  return {
    props: {
      fallback: {
        [`/api/discover?sort=${DEFAULT_SORT}&page=1`]: movies,
      },
      movies,
    },
  };
};

const CardLoading = () => {
  return (
    <GridContainer>
      {Array.from({ length: 20 }).map((_, idx) => (
        <Card key={idx}>
          <PosterCover>
            <div style={{ width: 274, height: 410 }}></div>
          </PosterCover>
        </Card>
      ))}
    </GridContainer>
  );
};

const Home = () => {
  const router = useRouter();
  const [hoverId, setHoverId] = useState<number | string | null>(null);
  const [pagination, setPagination] = useState<{ page: number; total: number }>(
    { page: 1, total: 0 }
  );
  const [sort, setSort] = useState<typeof MovieListTypes[number]>(DEFAULT_SORT);

  const { data: movies, isValidating } = useSWR<
    PaginationResponse<MovieRecord[]>
  >(`/api/discover?sort=${sort}&page=${pagination.page}`, {
    onSuccess(data) {
      setPagination({ page: data.page || 1, total: data.total_pages });
    },
  });

  const handleChangeSort = (sort: string) => {
    setPagination((prev) => ({ ...prev, page: 1 }));
    setSort(sort as typeof MovieListTypes[number]);
  };

  return (
    <>
      <Head>
        <title>TMDB App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Container>
          <Tabs
            value={sort ? (Array.isArray(sort) ? sort[0] : sort) : undefined}
            align="center"
            mb={1}
            onChange={handleChangeSort}
          >
            {MOVIES_TYPES.map((sort) => (
              <Tabs.Item
                key={sort.value}
                value={sort.value}
                label={sort.text}
              ></Tabs.Item>
            ))}
          </Tabs>

          {isValidating ? (
            <CardLoading />
          ) : !movies?.results ? (
            <Container>
              <Note type="error" label="error" filled>
                Something went wrong.
              </Note>
            </Container>
          ) : (
            <>
              <GridContainer>
                {movies?.results.map((movie) => (
                  <Link
                    href={`/movie/${movie.id}`}
                    key={`${movie.id}_${movie.title}`}
                  >
                    <CardRelative
                      onMouseEnter={() => setHoverId(movie.id)}
                      onMouseLeave={() => setHoverId(null)}
                    >
                      <PosterCover></PosterCover>
                      <Image
                        src={IMAGE_URL(
                          movie.poster_path || movie.backdrop_path
                        )}
                        placeholder="blur"
                        blurDataURL={blurDataUrl()}
                        fill
                        objectFit="cover"
                        alt={movie.title}
                      />
                      <BlurBg data-active={hoverId === movie.id}>
                        <Text b>{movie.title}</Text>
                        <Text small>
                          {new Date(movie.release_date).getFullYear()}
                        </Text>
                        <Grid.Container gap={1} wrap="nowrap" mt={1}>
                          <Grid>
                            <Rating
                              locked={true}
                              value={Math.ceil(movie.vote_average) / 2}
                              type="warning"
                            />
                          </Grid>
                          <Grid>
                            <Badge type="secondary">{movie.vote_average}</Badge>
                          </Grid>
                        </Grid.Container>
                      </BlurBg>
                    </CardRelative>
                  </Link>
                ))}
              </GridContainer>

              <Grid.Container justify="center" mt={2}>
                <Grid>
                  <Pagination
                    limit={5}
                    count={pagination.total}
                    page={pagination.page}
                    initialPage={pagination.page}
                    onChange={(newPage) =>
                      newPage !== pagination.page &&
                      setPagination((prev) => ({ ...prev, page: newPage }))
                    }
                  />
                </Grid>
              </Grid.Container>
            </>
          )}
        </Container>
      </main>
    </>
  );
};

const Page = ({ fallback }: { fallback: { [key: string]: any } }) => {
  return (
    <SWRConfig value={{ fallback }}>
      <Home />
    </SWRConfig>
  );
};

export default Page;
